# Number expression

foo = 0

==>

Cell(NamedExpressionCell(VariableName,Equals,Number))

# Block with return

foo = { return 0; }

==>

Cell(NamedBlockCell(VariableName,Equals,Block(ReturnStatement(return,Number))))

# Block with await return

foo = { return await 0; }

==>

Cell(NamedBlockCell(VariableName,Equals,Block(ReturnStatement(return,UnaryExpression(await,Number)))))

# Block with yield

foo = { yield 0; }

==>

Cell(NamedBlockCell(VariableName,Equals,Block(ExpressionStatement(UnaryExpression(yield,Number)))))

# Object expression

foo = ({})

==>

Cell(NamedExpressionCell(VariableName,Equals,ParenthesizedExpression(ObjectExpression)))

# Comma expression

foo = 1, 2, 3

==>

Cell(NamedExpressionCell(VariableName,Equals,SequenceExpression(Number,Number,Number)))

# Named class declaration

class Foo {}

==>

Cell(NamedClassCell(class,VariableName,ClassBody))

# Named class expression

Foo = class {}

==>

Cell(NamedExpressionCell(VariableName,Equals,ClassExpression(class,ClassBody)))

# Named function declaration

function foo() {}

==>

Cell(NamedFunctionCell(function,VariableName,ParamList,Block))

# Named function expression

foo = function() {}

==>

Cell(NamedExpressionCell(VariableName,Equals,FunctionExpression(function,ParamList,Block)))

# Named generator function expression

foo = function*() {}

==>

Cell(NamedExpressionCell(VariableName,Equals,FunctionExpression(function,Star,ParamList,Block)))

# Named async function expression

foo = async function() {}

==>

Cell(NamedExpressionCell(VariableName,Equals,FunctionExpression(async,function,ParamList,Block)))

# Named arrow function expression

foo = () => {}

==>

Cell(NamedExpressionCell(VariableName,Equals,ArrowFunction(ParamList,Arrow,Block)))
