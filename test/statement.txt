# Variable declaration

{
  var a = b
    , c = d;
  const [x] = y = 3;
}

==>

Cell(Block(
  VariableDeclaration(var,VariableDefinition,Equals,VariableName,VariableDefinition,Equals,VariableName),
  VariableDeclaration(const,ArrayPattern(VariableDefinition),Equals,AssignmentExpression(VariableName,Equals,Number))))

# Function declaration

{
  function a(a, b) { return 3; }
  function b({b}, c = d, e = f) {}
}

==>

Cell(Block(
  FunctionDeclaration(function,VariableDefinition,ParamList(VariableDefinition,VariableDefinition),Block(ReturnStatement(return,Number))),
  FunctionDeclaration(function,VariableDefinition,ParamList(
    ObjectPattern(PatternProperty(PropertyName)),VariableDefinition,Equals,VariableName,VariableDefinition,Equals,VariableName),Block)))

# Async functions

{
  async function foo() {}

  class Foo { async bar() {} }

  async (a) => { return foo; };
}

==>

Cell(Block(
  FunctionDeclaration(async,function,VariableDefinition,ParamList,Block),
  ClassDeclaration(class,VariableDefinition,ClassBody(MethodDeclaration(async,PropertyNameDefinition,ParamList,Block))),
  ExpressionStatement(ArrowFunction(async,ParamList(VariableDefinition),Arrow,Block(ReturnStatement(return,VariableName))))))

# If statements

{
  if (x) log(y);

  if (a.b) {
    d;
  }

  if (a) {
    c;
    d;
  } else {
    e;
  }

  if (1) if (2) b; else c;
}

==>

Cell(Block(
  IfStatement(if,ParenthesizedExpression(VariableName),ExpressionStatement(CallExpression(VariableName,ArgList(VariableName)))),
  IfStatement(if,ParenthesizedExpression(MemberExpression(VariableName,PropertyName)),Block(ExpressionStatement(VariableName))),
  IfStatement(if,ParenthesizedExpression(VariableName),Block(ExpressionStatement(VariableName),ExpressionStatement(VariableName)),
    else,Block(ExpressionStatement(VariableName))),
  IfStatement(if,ParenthesizedExpression(Number),IfStatement(if,ParenthesizedExpression(Number),ExpressionStatement(VariableName),
    else,ExpressionStatement(VariableName)))))

# While loop

{
  while (1) debugger;
  while (2) {
    a;
    b;
  }
}

==>

Cell(Block(
  WhileStatement(while,ParenthesizedExpression(Number),DebuggerStatement(debugger)),
  WhileStatement(while,ParenthesizedExpression(Number),Block(ExpressionStatement(VariableName),ExpressionStatement(VariableName)))))

# Labels

{
  foo: 1;
  foo: while(2) break foo;
}

==>

Cell(Block(
  LabeledStatement(Label,ExpressionStatement(Number)),
  LabeledStatement(Label,WhileStatement(while,ParenthesizedExpression(Number),BreakStatement(break,Label)))))

# Try

{
  try { throw new Error; } catch {}
  try { 1; } catch (x) { 2; } finally { 3; }
}

==>

Cell(Block(
  TryStatement(try,Block(ThrowStatement(throw,NewExpression(new,VariableName))),catch,Block),
  TryStatement(try,Block(ExpressionStatement(Number)),
    catch,VariableDefinition,Block(ExpressionStatement(Number)),
    finally,Block(ExpressionStatement(Number)))))

# Switch

{
  switch (x) {
    case 1:
      return true;
    case 2:
    case 50 * 3:
      console.log("ok");
    default:
      return false;
  }
}

==>

Cell(Block(SwitchStatement(switch,ParenthesizedExpression(VariableName),SwitchBody(
  CaseLabel(case,Number),
  ReturnStatement(return,BooleanLiteral),
  CaseLabel(case,Number),
  CaseLabel(case,BinaryExpression(Number,ArithOp,Number)),
  ExpressionStatement(CallExpression(MemberExpression(VariableName,PropertyName),ArgList(String))),
  DefaultLabel(default),
  ReturnStatement(return,BooleanLiteral)))))

# For

{
  for (let x = 1; x < 10; x++) {}
  for (const y of z) {}
  for (var m in n) {}
  for (q in r) {}
  for (var a, b; c; d) continue;
  for (i = 0, init(); i < 10; i++) {}
  for (;;) {}
  for (const {thing} in things) thing;
  for await (let x of stream) {}
}

==>

Cell(Block(
  ForStatement(for,ForSpec(VariableDeclaration(let,VariableDefinition,Equals,Number),
    BinaryExpression(VariableName,CompareOp,Number),PostfixExpression(VariableName,ArithOp)),Block),
  ForStatement(for,ForOfSpec(const,VariableDefinition,of,VariableName),Block),
  ForStatement(for,ForInSpec(var,VariableDefinition,in,VariableName),Block),
  ForStatement(for,ForInSpec(VariableName,in,VariableName),Block),
  ForStatement(for,ForSpec(VariableDeclaration(var,VariableDefinition,VariableDefinition),VariableName,VariableName),ContinueStatement(continue)),
  ForStatement(for,ForSpec(SequenceExpression(AssignmentExpression(VariableName,Equals,Number),
    CallExpression(VariableName,ArgList)),BinaryExpression(VariableName,CompareOp,Number),PostfixExpression(VariableName,ArithOp)),Block),
  ForStatement(for,ForSpec,Block),
  ForStatement(for,ForInSpec(const,ObjectPattern(PatternProperty(PropertyName)),in,VariableName),ExpressionStatement(VariableName)),
  ForStatement(for,await,ForOfSpec(let,VariableDefinition,of,VariableName),Block)))

# Labeled statements

{
  theLoop: for (;;) {
    if (a) {
      break theLoop;
    }
  }
}

==>

Cell(Block(LabeledStatement(Label,ForStatement(for,ForSpec,Block(
  IfStatement(if,ParenthesizedExpression(VariableName),Block(BreakStatement(break,Label))))))))

# Classes

{
  class Foo {
    static one(a) { return a; };
    two(b) { return b; }
    finally() {}
  }

  class Foo extends require('another-class') {
    constructor() { super(); }
    bar() { super.a(); }
  }
}

==>

Cell(Block(
  ClassDeclaration(class,VariableDefinition,ClassBody(
    MethodDeclaration(static,PropertyNameDefinition,ParamList(VariableDefinition),Block(ReturnStatement(return,VariableName))),
    MethodDeclaration(PropertyNameDefinition,ParamList(VariableDefinition),Block(ReturnStatement(return,VariableName))),
    MethodDeclaration(PropertyNameDefinition,ParamList,Block))),
  ClassDeclaration(class,VariableDefinition,extends,CallExpression(VariableName,ArgList(String)),ClassBody(
    MethodDeclaration(PropertyNameDefinition,ParamList,Block(ExpressionStatement(CallExpression(super,ArgList)))),
    MethodDeclaration(PropertyNameDefinition,ParamList,Block(ExpressionStatement(CallExpression(MemberExpression(super,PropertyName),ArgList))))))))

# Import default

import defaultMember from "module-name";

==>

  Cell(ImportDeclaration(import,VariableDefinition,from,String))

# Import star

import * as name from "module-name";

==>

  Cell(ImportDeclaration(import,Star,as,VariableDefinition,from,String))

# Import one

import { member } from "module-name";

==>

  Cell(ImportDeclaration(import,ImportGroup(VariableDefinition),from,String))

# Import many

import { member1, member2 as alias2 } from "module-name";

==>

  Cell(ImportDeclaration(import,ImportGroup(VariableDefinition,VariableName,as,VariableDefinition),from,String))

# Import default and many

import defaultMember, { member1, member2 as alias2, } from "module-name";

==>

  Cell(ImportDeclaration(import,VariableDefinition,ImportGroup(VariableDefinition,VariableName,as,VariableDefinition),from,String))

# Empty statements

{
  if (true) { ; };;;
}

==>

Cell(Block(IfStatement(if,ParenthesizedExpression(BooleanLiteral),Block)))

# Comments

{
  /* a */
  one;

  /* b **/
  two;

  /* c ***/
  three;

  /* d

  ***/
  four;

  y // comment
    * z;
}

==>

Cell(Block(
  BlockComment,
  ExpressionStatement(VariableName),
  BlockComment,
  ExpressionStatement(VariableName),
  BlockComment,
  ExpressionStatement(VariableName),
  BlockComment,
  ExpressionStatement(VariableName),
  ExpressionStatement(BinaryExpression(VariableName,LineComment,ArithOp,VariableName))))

# Recover from invalid char

{
  const {foo#bar} = {};
}

==>

Cell(Block(VariableDeclaration(
  const,
  ObjectPattern("{",PatternProperty(PropertyName,âš ,VariableDefinition),"}"),
  Equals,
  ObjectExpression)))

# Sync back to statement

{
  function f() {
    log(a b --c)
  }
  function g() {}
}

==>

Cell(Block(
  FunctionDeclaration(function,VariableDefinition,ParamList,Block(ExpressionStatement(CallExpression(VariableName,ArgList(...))))),
  FunctionDeclaration(function,VariableDefinition,ParamList,Block)))
